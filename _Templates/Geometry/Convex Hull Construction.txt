typedef complex<long long> point;
long long cross(point a, point b) {
    return (conj(a) * b).imag();
}

vector<point> getConvexHull(vector<point> a) { // colinear included, returned in clockwise order
    sort(a.begin(), a.end(), [&](point x, point y) {
        if (x.real() == y.real()) return x.imag() < y.imag();
        return x.real() < y.real();
    });
    vector<point> lower_hull;
    for (point p : a) {
        while (lower_hull.size() >= 2 && cross(lower_hull[lower_hull.size() - 1] - p, lower_hull[lower_hull.size() - 2] - p) > 0) { // change to >= to not include colinear points
            lower_hull.pop_back();
        }
        lower_hull.push_back(p);
    }
    vector<point> upper_hull;
    reverse(a.begin(), a.end());
    for (point p : a) {
        while (upper_hull.size() >= 2 && cross(upper_hull[upper_hull.size() - 1] - p, upper_hull[upper_hull.size() - 2] - p) > 0) { // change to >= to not include colinear points
            upper_hull.pop_back();
        }
        upper_hull.push_back(p);
    }
    lower_hull.pop_back();
    upper_hull.pop_back();
    vector<point> hull;
    hull.insert(hull.end(), lower_hull.begin(), lower_hull.end());
    hull.insert(hull.end(), upper_hull.begin(), upper_hull.end());
    return hull;
}
