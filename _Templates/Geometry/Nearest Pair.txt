const long long INF = 9e18;

long long dist(array<int, 2> a, array<int, 2> b) { // can be replaced with other distance metrics
    return 1LL * (a[0] - b[0]) * (a[0] - b[0]) + 1LL * (a[1] - b[1]) * (a[1] - b[1]);
}

int main() {
    vector<array<int, 2>> a(n);

    sort(a.begin(), a.end(), [&](array<int, 2> x, array<int, 2> y) { return x[0] < y[0]; });
    long long d = INF;

    function<void(int, int)> dnc = [&](int l, int r) {
        if (l + 1 == r) return;
        int m = (l + r) >> 1;
        int mx = a[m][0];
        dnc(l, m);
        dnc(m, r);
        vector<array<int, 2>> temp(r - l);
        merge(a.begin() + l, a.begin() + m, a.begin() + m, a.begin() + r, temp.begin(), [&](array<int, 2> x, array<int, 2> y) { return x[1] < y[1]; });
        copy(temp.begin(), temp.end(), a.begin() + l);
        vector<array<int, 2>> fetch;
        for (int i = l; i < r; i++) {
            if (1LL * (a[i][0] - mx) * (a[i][0] - mx) < d) {
                fetch.push_back(a[i]);
            }
        }
        for (int i = 0; i < fetch.size(); i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (1LL * (fetch[i][1] - fetch[j][1]) * (fetch[i][1] - fetch[j][1]) >= d) break;
                d = min(d, dist(fetch[i], fetch[j]));
            }
        }
    };
    dnc(0, n);

    cout << d << '\n';
}