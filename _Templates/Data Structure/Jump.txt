// Usage: Jump jump(link);
// absorbing state is -1

struct Jump {
    Jump() = default;
    Jump(const vector<int>& v) : t{v}, n{(int) v.size()} {
        for (int k = 1; (1<<k) <= n; ++k) {
            t.emplace_back(n);
            for (int i = 0; i < n; ++i) {
                t[k][i] = t[k - 1][i] == -1 ? -1 : t[k - 1][t[k - 1][i]];
            }
        }
    }
    // jump exactly from l to exactly r
    int get(int l, int r) const {
        int res = 0;
        if (l == r) return 0;
        for (int i = t.size() - 1; i >= 0; i--) if (t[i][l] != -1 && t[i][l] < r) {
            res += 1 << i;
            l = t[i][l];
        }
        return res + 1;
    }
private:
    vector<vector<int>> t;
    int n;
};