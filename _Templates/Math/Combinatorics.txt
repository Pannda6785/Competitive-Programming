const int P = 1e9 + 7;

namespace combinatorics {
    int power(int a, int b) {
        int res = 1;
        for (; b; b /= 2, a = 1LL * a * a % P) {
            if (b & 1) {
                res = 1LL * res * a % P;
            }
        }
        return res;
    }

    vector<int> fac, invfac, inv;
    void compute(int n) {
        fac = vector<int>(n);
        fac[0] = 1;
        for (int i = 1; i < n; i++) {
            fac[i] = 1LL * fac[i - 1] * i % P;
        }
        invfac = vector<int>(n);
        invfac[n - 1] = power(fac[n - 1], P - 2);
        for (int i = n - 2; i >= 0; i--) {
            invfac[i] = 1LL * invfac[i + 1] * (i + 1) % P;
        }
        assert(invfac[0] == 1);
        inv = vector<int>(n);
        for (int i = 1; i < n; i++) {
            inv[i] = 1LL * fac[i - 1] * invfac[i] % P;
        }
    }

    vector<vector<int>> stirling1;
    vector<vector<int>> stirling2;
    vector<int> bell;
    void computeStirling(int n) {
        stirling1 = vector<vector<int>>(n, vector<int>(n, 0));
        stirling2 = vector<vector<int>>(n, vector<int>(n, 0));
        bell = vector<int>(n, 0);
        stirling1[0][0] = 1;
        stirling2[0][0] = 1;
        bell[0] = 1;
        for (int i = 1; i < n; i++) {
            stirling1[i][0] = 0;
            stirling2[i][0] = 0;
            for (int j = 1; j <= i; j++) {
                stirling1[i][j] = (stirling1[i - 1][j - 1] + 1LL * (i - 1) * stirling1[i - 1][j]) % P;
                stirling2[i][j] = (stirling2[i - 1][j - 1] + 1LL * j * stirling2[i - 1][j]) % P;
                bell[i] = (bell[i] + stirling2[i][j]) % P;
            }
        }
    }

    vector<int> derangement;
    void computeDerangement(int n) {
        derangement = vector<int>(n);
        derangement[0] = 1;
        derangement[1] = 0;
        for (int i = 2; i < n; i++) {
            derangement[i] = 1LL * (i - 1) * (derangement[i - 1] + derangement[i - 2]) % P;
        }
    }

    vector<vector<int>> eulerian;
    void computeEulerian(int n) {
        eulerian = vector<vector<int>>(n, vector<int>(n, 0));
        eulerian[0][0] = 1;
        for (int i = 1; i < n; i++) {
            eulerian[i][0] = 1;
            for (int j = 1; j < i; j++) {
                eulerian[i][j] = (1LL * (i - j) * eulerian[i - 1][j - 1] + 1LL * (j + 1) * eulerian[i - 1][j]) % P;
            }
        }
    }

    int Factorial(int n) {
        return fac[n];
    }

    int InvFactorial(int n) {
        return invfac[n];
    }

    int Inv(int n) {
        return inv[n];
    }

    int Binomial(int n, int k) {
        if (k < 0 || k > n) return 0;
        return 1LL * fac[n] * invfac[k] % P * invfac[n - k] % P;
    }

    int Catalan(int n) {
        return 1LL * Binomial(2 * n, n) * inv[n + 1] % P;
    }

    int Stirling1(int n, int k) {
        return stirling1[n][k];
    }

    int SignedStirling1(int n, int k) {
        int res = Stirling1(n, k);
        if ((n - k) % 2 != 0) res = (P - res) % P;
        return res;
    }

    int Stirling2(int n, int k) {
        return stirling2[n][k];
    }

    int Bell(int n) {
        return bell[n];
    }

    int Derangement(int n) { // d(n) = (n-1)(d(n-1)+d(n-2)) = n*d(n-1)+(-1)^n = round(n!/e)
        return derangement[n];
    }

    int Eulerian(int n, int k) { // e(n,k) = (n-k)*e(n-1,k-1)+(k+1)*e(n-1,k)
        return eulerian[n][k];
    }
};