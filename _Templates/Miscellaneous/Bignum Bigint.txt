namespace polynomial {
    namespace convolution {
 
        typedef complex<double> cd;
        const double PI = acos(-1);
 
        template <bool invert>
        void dft(vector<cd> &a) {
            int n = a.size();
            if (n == 1) return;
            vector<cd> a0(n / 2), a1(n / 2);
            for (int i = 0; i < n / 2; i++) {
                a0[i] = a[2 * i];
                a1[i] = a[2 * i + 1];
            }
            dft<invert>(a0);
            dft<invert>(a1);
            double ang = 2 * PI / n * (invert ? -1 : +1);
            cd w(1), theta(cos(ang), sin(ang));
            for (int i = 0; i < n / 2; i++) {
                a[i] = a0[i] + w * a1[i];
                a[i + n / 2] = a0[i] - w * a1[i];
                if (invert) a[i] /= 2, a[i + n / 2] /= 2;
                w *= theta;
            }
        }
 
        vector<long long> polyMult(vector<long long> a, vector<long long> b) {
            vector<cd> fa(a.begin(), a.end()), fb(b.begin(), b.end());
            int n = 1;
            while (n < a.size() + b.size()) n <<= 1;
            fa.resize(n);
            fb.resize(n);
            dft<false>(fa);
            dft<false>(fb);
            for (int i = 0; i < n; i++) fa[i] = fa[i] * fb[i];
            dft<true>(fa);
            vector<long long> res(n);
            for (int i = 0; i < n; i++) res[i] = round(fa[i].real());
            while (res.back() == 0) res.pop_back();
            return res;
        }
 
    }
}
 
struct Bigint {
    const array<int, 10> TEN = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};
    const int LOG = 4;
    const int BASE = TEN[LOG];
    vector<int> dat;
 
    Bigint(long long n) {
        while (n > 0) {
            dat.push_back(n % BASE);
            n /= BASE;
        }
    }
 
    Bigint(string n) {
        assert(!n.empty());
        if (n == "0") return;
        int fetch = 0, cnt = 0;
        for (int i = n.size() - 1; i >= 0; i--) {
            fetch = fetch + TEN[cnt] * (n[i] - '0');
            cnt++;
            if (cnt == LOG || i == 0) {
                dat.push_back(fetch);
                fetch = 0;
                cnt = 0;
            }
        }
    }
 
    Bigint &operator=(const Bigint &x) {
        dat = x.dat;
        return *this;
    }
    bool operator<(const Bigint &x) const {
        if (dat.size() != x.dat.size()) return dat.size() < x.dat.size();
        if (dat.empty()) return false;
        for (int i = dat.size() - 1; i >= 0; i--) {
            if (dat[i] != x.dat[i]) return dat[i] < x.dat[i];
        }
        return false;
    }
    bool operator>(const Bigint &x) const { return x < *this; }
    bool operator<=(const Bigint &x) const { return !(*this > x); }
    bool operator>=(const Bigint &x) const { return !(*this < x); }
    bool operator==(const Bigint &x) const { return dat == x.dat; }
    Bigint &operator+=(const Bigint &x) {
        int carry = 0;
        if (x.dat.size() > dat.size()) dat.resize(x.dat.size(), 0);
        for (int i = 0; i < dat.size(); i++) {
            dat[i] += (i < x.dat.size() ? x.dat[i] : 0) + carry;
            if (dat[i] >= BASE) {
                carry = 1;
                dat[i] -= BASE;
            } else {
                carry = 0;
            }
        }
        if (carry) dat.push_back(1);
        return *this;
    }
    Bigint &operator*=(const Bigint &x) {
        vector<long long> res = polynomial::convolution::polyMult(vector<long long>(dat.begin(), dat.end()), vector<long long>(x.dat.begin(), x.dat.end()));
        for (int i = 0; i < res.size(); i++) {
            if (res[i] >= BASE) {
                if (i + 1 >= res.size()) res.push_back(0);
                res[i + 1] += res[i] / BASE;
                res[i] %= BASE;
            }
        }
        dat = vector<int>(res.begin(), res.end());
        return *this;
    }
    Bigint &operator^=(long long b) {
        Bigint res(1);
        Bigint a = *this;
        for (; b; b >>= 1, a *= a) {
            if (b & 1) {
                res *= a;
            }
        }
        dat = res.dat;
        return *this;
    }
    Bigint operator+(const Bigint &b) const {
        Bigint a = *this;
        return a+=b;
    }
    Bigint operator*(const Bigint &b) const {
        Bigint a = *this;
        return a*=b;
    }
    Bigint operator^(long long b) const {
        Bigint a = *this;
        return a^=b;
    }
    double log10() {
        const int K = 36 / LOG; // only considers K most significant digits
        assert(!dat.empty());
        if (dat.size() < K) {
            double n = 0;
            for (int i = dat.size() - 1; i >= 0; i--) {
                n = BASE * n + dat[i];
            }
            return std::log10(n);
        }
        double n = 0;
        for (int i = dat.size() - 1; i >= (int)dat.size() - K; i--) {
            n = BASE * n + dat[i];
        }
        n = std::log10(n);
        n += double(LOG) * (dat.size() - K);
        return n;
    }
    double logb(double b) {
        return log10() / std::log10(b);
    }
 
    string to_string() {
        if (dat.empty()) return "0";
        string res;
        for (int x : dat) {
            for (int i = 0; i < LOG; i++) {
                res.push_back(char('0' + x % 10));
                x /= 10;
            }
        }
        while (res.back() == '0') res.pop_back();
        reverse(res.begin(), res.end());
        return res;
    }
};
 
ostream &operator<<(ostream &out, const Bigint &x) {
    Bigint X = x;
    return out << X.to_string();
}
 